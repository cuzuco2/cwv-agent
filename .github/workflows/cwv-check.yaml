# Works for bbird repo :  
#i made sure that artifacts are generated; ( the artifacts are basically the cwv-agent suggestions, the summary report basically! )
#by installing that github workfow into the blackbird repo , the below code generates public url artifact !

# Workflow Link : https://github.com/aemsites/bbird/actions/runs/16208965114/job/45765314958
# PR Link :  
# Added a 1 day timer to ensure artifacts auto-expire after 24 hours.
# Uploaded each CWV output (desktop summary, mobile summary, suggestions) as separate artifacts for better granularity.

name: CWV PR Check

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  run-cwv-check:
    runs-on: ubuntu-latest
    environment: cwv-check-env-junaid

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install CWV Agent
        run: npm install --no-save git+https://github.com/ramboz/cwv-agent.git

      - name: Print dummy secret for testing
        run: |
          echo "Dummy key from secret: ${{ secrets.DUMMY_TEST_KEY }}"

      - name: Build Preview URL
        id: build_url
        run: |
          BRANCH=${{ github.head_ref }}
          REPO=${{ github.event.repository.name }}
          OWNER=${{ github.repository_owner }}
          PREVIEW_URL="https://${BRANCH}--${REPO}--${OWNER}.aem.page"
          echo "PREVIEW_URL=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Run CWV Agent (Mobile & Desktop)
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          AZURE_OPENAI_API_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_API_DEPLOYMENT_NAME }}
          AZURE_OPENAI_API_INSTANCE_NAME: ${{ secrets.AZURE_OPENAI_API_INSTANCE_NAME }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
          GOOGLE_PAGESPEED_INSIGHTS_API_KEY: ${{ secrets.GOOGLE_PAGESPEED_INSIGHTS_API_KEY }}
          GOOGLE_CRUX_API_KEY: ${{ secrets.GOOGLE_CRUX_API_KEY }}
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
          PUPPETEER_EXECUTABLE_PATH: "/usr/bin/google-chrome"
        run: |
          echo "‚ö° Using URL: ${{ steps.build_url.outputs.preview_url }}"
          node node_modules/cwv-agent/index.js --action prompt --url ${{ steps.build_url.outputs.preview_url }} --device mobile --model gpt-4o
          node node_modules/cwv-agent/index.js --action prompt --url ${{ steps.build_url.outputs.preview_url }} --device desktop --model gpt-4o
          # Copy results to a top-level folder for uploading
          mkdir -p cwv-output
          cp node_modules/cwv-agent/.cache/*.report.gpt4o.summary.md cwv-output/
          cp node_modules/cwv-agent/.cache/*.suggestions.gpt4o.json cwv-output/

      - name: Upload Desktop Report
        uses: actions/upload-artifact@v4
        with:
          name: desktop-report
          path: cwv-output/*.desktop.report.gpt4o.summary.md
          if-no-files-found: error
          retention-days: 1

      - name: Upload Mobile Report
        uses: actions/upload-artifact@v4
        with:
          name: mobile-report
          path: cwv-output/*.mobile.report.gpt4o.summary.md
          if-no-files-found: error
          retention-days: 1

      - name: Upload Suggestions JSON
        uses: actions/upload-artifact@v4
        with:
          name: suggestions-json
          path: cwv-output/*.suggestions.gpt4o.json
          if-no-files-found: error
          retention-days: 1

      - name: Print project file tree (excluding node_modules)
        run: |
          sudo apt-get update && sudo apt-get install -y tree
          echo "üìÅ Project structure (excluding node_modules):"
          tree -L 3 -a -I 'node_modules'